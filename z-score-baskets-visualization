"""
Z-Score Visualization for Basket Spreads
Shows z-score ranges with horizontal markers
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# ============================================================================
# LOAD DATA
# ============================================================================

url = 'https://raw.githubusercontent.com/liux05/imc-prosperity3-round2-data/refs/heads/main/apexoa.csv'
df_long = pd.read_csv(url)

prices_all = df_long.pivot_table(
    values='mid_price',
    index='timestamp',
    columns='product'
)

prices = pd.DataFrame(index=prices_all.index)
prices['C'] = prices_all['CROISSANTS']
prices['J'] = prices_all['JAMS']
prices['D'] = prices_all['DJEMBES']
prices['B1_market'] = prices_all['PICNIC_BASKET1']
prices['B2_market'] = prices_all['PICNIC_BASKET2']

# Calculate theoretical values
prices['B1_theo'] = 6*prices['C'] + 3*prices['J'] + 1*prices['D']
prices['B2_theo'] = 4*prices['C'] + 2*prices['J']

# Calculate raw spreads
prices['S_B1_raw'] = prices['B1_market'] - prices['B1_theo']
prices['S_B2_raw'] = prices['B2_market'] - prices['B2_theo']

# Demean spreads
demean_window = 200
prices['S_B1'] = prices['S_B1_raw'] - prices['S_B1_raw'].rolling(demean_window, min_periods=1).mean()
prices['S_B2'] = prices['S_B2_raw'] - prices['S_B2_raw'].rolling(demean_window, min_periods=1).mean()

# ============================================================================
# CALCULATE Z-SCORES (WITH PROPER LAG)
# ============================================================================

halflife = 50

# Basket 1 z-score
ewma_mean_b1 = prices['S_B1'].ewm(halflife=halflife, adjust=False).mean().shift(1)
ewma_std_b1 = prices['S_B1'].ewm(halflife=halflife, adjust=False).std().shift(1)
prices['z_B1'] = (prices['S_B1'] - ewma_mean_b1) / ewma_std_b1

# Basket 2 z-score
ewma_mean_b2 = prices['S_B2'].ewm(halflife=halflife, adjust=False).mean().shift(1)
ewma_std_b2 = prices['S_B2'].ewm(halflife=halflife, adjust=False).std().shift(1)
prices['z_B2'] = (prices['S_B2'] - ewma_mean_b2) / ewma_std_b2

print(f"âœ“ Calculated z-scores for both baskets\n")

# ============================================================================
# CALCULATE Z-SCORE STATISTICS (HANDLE NaN/Inf)
# ============================================================================

print("="*70)
print("Z-SCORE STATISTICS")
print("="*70)

# Clean z-scores by removing NaN and Inf
z_b1_clean = prices['z_B1'].replace([np.inf, -np.inf], np.nan).dropna()
z_b2_clean = prices['z_B2'].replace([np.inf, -np.inf], np.nan).dropna()

stats_b1 = {
    'mean': z_b1_clean.mean(),
    'std': z_b1_clean.std(),
    'min': z_b1_clean.min(),
    'max': z_b1_clean.max(),
    'p5': z_b1_clean.quantile(0.05),
    'p25': z_b1_clean.quantile(0.25),
    'p50': z_b1_clean.quantile(0.50),
    'p75': z_b1_clean.quantile(0.75),
    'p95': z_b1_clean.quantile(0.95),
}

stats_b2 = {
    'mean': z_b2_clean.mean(),
    'std': z_b2_clean.std(),
    'min': z_b2_clean.min(),
    'max': z_b2_clean.max(),
    'p5': z_b2_clean.quantile(0.05),
    'p25': z_b2_clean.quantile(0.25),
    'p50': z_b2_clean.quantile(0.50),
    'p75': z_b2_clean.quantile(0.75),
    'p95': z_b2_clean.quantile(0.95),
}

print("\nðŸ“Š BASKET 1 Z-Score Statistics:")
for key, val in stats_b1.items():
    print(f"   {key:8s}: {val:7.3f}")

print("\nðŸ“Š BASKET 2 Z-Score Statistics:")
for key, val in stats_b2.items():
    print(f"   {key:8s}: {val:7.3f}")

# ============================================================================
# VISUALIZATION
# ============================================================================

fig, axes = plt.subplots(2, 2, figsize=(16, 10))

# ============================================================================
# BASKET 1 - Z-Score Time Series
# ============================================================================

ax1 = axes[0, 0]
ax1.plot(prices.index, prices['z_B1'], linewidth=0.8, alpha=0.7, color='blue')
ax1.axhline(0, color='black', linestyle='-', linewidth=1.5, label='Mean (0)')

# Mark percentile ranges
ax1.axhline(stats_b1['p95'], color='red', linestyle='--', linewidth=1.5, 
            label=f"95th %ile: {stats_b1['p95']:.2f}", alpha=0.8)
ax1.axhline(stats_b1['p5'], color='red', linestyle='--', linewidth=1.5,
            label=f"5th %ile: {stats_b1['p5']:.2f}", alpha=0.8)
ax1.axhline(stats_b1['p75'], color='orange', linestyle='--', linewidth=1,
            label=f"75th %ile: {stats_b1['p75']:.2f}", alpha=0.6)
ax1.axhline(stats_b1['p25'], color='orange', linestyle='--', linewidth=1,
            label=f"25th %ile: {stats_b1['p25']:.2f}", alpha=0.6)

# Shade 5-95 percentile range
ax1.fill_between(prices.index, stats_b1['p5'], stats_b1['p95'], 
                 alpha=0.1, color='red', label='5th-95th %ile range')

# Shade 25-75 percentile range
ax1.fill_between(prices.index, stats_b1['p25'], stats_b1['p75'],
                 alpha=0.15, color='orange', label='25th-75th %ile range')

ax1.set_title('BASKET 1: Z-Score Over Time', fontweight='bold', fontsize=13)
ax1.set_ylabel('Z-Score', fontsize=11)
ax1.set_xlabel('Timestamp', fontsize=11)
ax1.legend(loc='upper right', fontsize=9)
ax1.grid(alpha=0.3)
# Set y-limits using clean stats
ax1.set_ylim([stats_b1['min']*1.1, stats_b1['max']*1.1])

# ============================================================================
# BASKET 1 - Z-Score Distribution
# ============================================================================

ax2 = axes[0, 1]
ax2.hist(z_b1_clean, bins=60, alpha=0.7, edgecolor='black', color='skyblue')
ax2.axvline(0, color='black', linestyle='-', linewidth=2, label='Mean (0)')
ax2.axvline(stats_b1['p95'], color='red', linestyle='--', linewidth=2,
            label=f"95th %ile: {stats_b1['p95']:.2f}")
ax2.axvline(stats_b1['p5'], color='red', linestyle='--', linewidth=2,
            label=f"5th %ile: {stats_b1['p5']:.2f}")
ax2.axvline(stats_b1['p75'], color='orange', linestyle='--', linewidth=1.5,
            label=f"75th %ile: {stats_b1['p75']:.2f}")
ax2.axvline(stats_b1['p25'], color='orange', linestyle='--', linewidth=1.5,
            label=f"25th %ile: {stats_b1['p25']:.2f}")

ax2.set_title('BASKET 1: Z-Score Distribution', fontweight='bold', fontsize=13)
ax2.set_xlabel('Z-Score', fontsize=11)
ax2.set_ylabel('Frequency', fontsize=11)
ax2.legend(loc='upper right', fontsize=9)
ax2.grid(alpha=0.3, axis='y')

# Add text box with statistics
textstr = f'Statistics:\n'
textstr += f'Mean: {stats_b1["mean"]:.3f}\n'
textstr += f'Std:  {stats_b1["std"]:.3f}\n'
textstr += f'Min:  {stats_b1["min"]:.3f}\n'
textstr += f'Max:  {stats_b1["max"]:.3f}'
props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
ax2.text(0.02, 0.98, textstr, transform=ax2.transAxes, fontsize=9,
         verticalalignment='top', bbox=props, family='monospace')

# ============================================================================
# BASKET 2 - Z-Score Time Series
# ============================================================================

ax3 = axes[1, 0]
ax3.plot(prices.index, prices['z_B2'], linewidth=0.8, alpha=0.7, color='green')
ax3.axhline(0, color='black', linestyle='-', linewidth=1.5, label='Mean (0)')

# Mark percentile ranges
ax3.axhline(stats_b2['p95'], color='red', linestyle='--', linewidth=1.5,
            label=f"95th %ile: {stats_b2['p95']:.2f}", alpha=0.8)
ax3.axhline(stats_b2['p5'], color='red', linestyle='--', linewidth=1.5,
            label=f"5th %ile: {stats_b2['p5']:.2f}", alpha=0.8)
ax3.axhline(stats_b2['p75'], color='orange', linestyle='--', linewidth=1,
            label=f"75th %ile: {stats_b2['p75']:.2f}", alpha=0.6)
ax3.axhline(stats_b2['p25'], color='orange', linestyle='--', linewidth=1,
            label=f"25th %ile: {stats_b2['p25']:.2f}", alpha=0.6)

# Shade percentile ranges
ax3.fill_between(prices.index, stats_b2['p5'], stats_b2['p95'],
                 alpha=0.1, color='red', label='5th-95th %ile range')
ax3.fill_between(prices.index, stats_b2['p25'], stats_b2['p75'],
                 alpha=0.15, color='orange', label='25th-75th %ile range')

ax3.set_title('BASKET 2: Z-Score Over Time', fontweight='bold', fontsize=13)
ax3.set_ylabel('Z-Score', fontsize=11)
ax3.set_xlabel('Timestamp', fontsize=11)
ax3.legend(loc='upper right', fontsize=9)
ax3.grid(alpha=0.3)
# Set y-limits using clean stats
ax3.set_ylim([stats_b2['min']*1.1, stats_b2['max']*1.1])

# ============================================================================
# BASKET 2 - Z-Score Distribution
# ============================================================================

ax4 = axes[1, 1]
ax4.hist(z_b2_clean, bins=60, alpha=0.7, edgecolor='black', color='lightgreen')
ax4.axvline(0, color='black', linestyle='-', linewidth=2, label='Mean (0)')
ax4.axvline(stats_b2['p95'], color='red', linestyle='--', linewidth=2,
            label=f"95th %ile: {stats_b2['p95']:.2f}")
ax4.axvline(stats_b2['p5'], color='red', linestyle='--', linewidth=2,
            label=f"5th %ile: {stats_b2['p5']:.2f}")
ax4.axvline(stats_b2['p75'], color='orange', linestyle='--', linewidth=1.5,
            label=f"75th %ile: {stats_b2['p75']:.2f}")
ax4.axvline(stats_b2['p25'], color='orange', linestyle='--', linewidth=1.5,
            label=f"25th %ile: {stats_b2['p25']:.2f}")

ax4.set_title('BASKET 2: Z-Score Distribution', fontweight='bold', fontsize=13)
ax4.set_xlabel('Z-Score', fontsize=11)
ax4.set_ylabel('Frequency', fontsize=11)
ax4.legend(loc='upper right', fontsize=9)
ax4.grid(alpha=0.3, axis='y')

# Add text box with statistics
textstr = f'Statistics:\n'
textstr += f'Mean: {stats_b2["mean"]:.3f}\n'
textstr += f'Std:  {stats_b2["std"]:.3f}\n'
textstr += f'Min:  {stats_b2["min"]:.3f}\n'
textstr += f'Max:  {stats_b2["max"]:.3f}'
props = dict(boxstyle='round', facecolor='lightgreen', alpha=0.5)
ax4.text(0.02, 0.98, textstr, transform=ax4.transAxes, fontsize=9,
         verticalalignment='top', bbox=props, family='monospace')

plt.tight_layout()
plt.savefig('zscore_analysis_both_baskets.png', dpi=150, bbox_inches='tight')
print("\nâœ“ Saved: 'zscore_analysis_both_baskets.png'")
plt.show()

# ============================================================================
# SUMMARY
# ============================================================================

print("\n" + "="*70)
print("SUMMARY")
print("="*70)

print("\nðŸ“Œ KEY OBSERVATIONS:")
print(f"\nBasket 1:")
print(f"  â€¢ Z-score range: [{stats_b1['min']:.2f}, {stats_b1['max']:.2f}]")
print(f"  â€¢ 90% of z-scores fall within: [{stats_b1['p5']:.2f}, {stats_b1['p95']:.2f}]")
print(f"  â€¢ 50% of z-scores fall within: [{stats_b1['p25']:.2f}, {stats_b1['p75']:.2f}]")

print(f"\nBasket 2:")
print(f"  â€¢ Z-score range: [{stats_b2['min']:.2f}, {stats_b2['max']:.2f}]")
print(f"  â€¢ 90% of z-scores fall within: [{stats_b2['p5']:.2f}, {stats_b2['p95']:.2f}]")
print(f"  â€¢ 50% of z-scores fall within: [{stats_b2['p25']:.2f}, {stats_b2['p75']:.2f}]")

print("\nðŸ’¡ TRADING IMPLICATIONS:")
if abs(stats_b1['p95']) > abs(stats_b2['p95']):
    print("  âœ“ Basket 1 has more extreme z-scores â†’ Better for trading")
else:
    print("  âœ“ Basket 2 has more extreme z-scores â†’ Better for trading")

print("\n  Typical z-score entry thresholds:")
print("    â€¢ Conservative: |z| â‰¥ 2.0 (captures ~5% of observations)")
print("    â€¢ Moderate:     |z| â‰¥ 1.5 (captures ~10-15% of observations)")
print("    â€¢ Aggressive:   |z| â‰¥ 1.0 (captures ~25-30% of observations)")

print("="*70)
